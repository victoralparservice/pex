<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_alabs_pex.PexScoreUtils</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>PexScoreUtils</name>
        <script><![CDATA[var PexScoreUtils = function() {
	/*
						|--------------------------------------------------------------------------
						|	Instâncias para manipulação das tabelas
						|--------------------------------------------------------------------------
						*/

	/*
						|--------------------------------------------------------------------------
						|	Tabelas relacionadas a notas
						*/
	this.NPS = new global.TableCRUD("x_alabs_pex_nps_note"); //Notas NPS
	this.VertSurveyInst = new global.TableCRUD("x_alabs_pex_instance_survey"); // Pesquisas (Verticais, auto avaliações)
	this.TechnicalPerformance = new global.TableCRUD(
		"x_alabs_pex_technical_performances"
	); // Desempenho técnico
	this.GeneralScore = new global.TableCRUD("x_alabs_pex_general_notes"); // Notas gerais

	/*
						|--------------------------------------------------------------------------
						|	Tabelas relacionadas à informações necessárias
						*/
	this.Flight = new global.TableCRUD("x_alabs_pex_flights"); // Vôos
	this.FlightCrew = new global.TableCRUD("x_alabs_pex_flight_crew"); //Tripulantes de voo
	this.CrewManagement = new global.TableCRUD("x_alabs_pex_crew_management"); // Gestão de tripulantes
	this.CrewGroup = new global.TableCRUD("x_alabs_pex_crew_group"); // Grupos de tripulantes
	this.CrewGroupMember = new global.TableCRUD("x_alabs_pex_crew_group_m2m"); // Grupos de tripulantes

	/*
						|--------------------------------------------------------------------------
						|	Atualiza nota NPS
						|--------------------------------------------------------------------------
						*/
	this.updateNPS = function() {
		var self = this;
		var query;
		var options;
		var insertValues;

		/*
							|--------------------------------------------------------------------------
							|	Obtenção do grupo
							*/
		var flight = self.Flight.data[0];

		/*
							|--------------------------------------------------------------------------
							|	Obtém grupos a partir do voo
							*/
		query = {
			ja_recebeu_a_pesquisa: "true",
			origem: flight.origem.u_iata.toString(),
			destino: flight.destino.u_iata.toString(),
			numero_do_voo: flight.numero_do_voo.toString(),
			type: self.NPS.data.role.toString(),
			data_e_hora_de_partida: flight.data_partida_utc.toString()
		};
		options = {
			setLimit: 1,
			orderByDesc: "sys_created_on"
		};
		self.CrewGroup.get(query, options);

		query = {
			group: self.CrewGroup.data[0].getUniqueValue()
		};

		/*
							|--------------------------------------------------------------------------
							|	Obtém usuários a partir do grupo
							*/
		var users = self.CrewGroupMember.get(query).map(function(gr) {
			return gr.user.toString();
		});
		users.forEach(function(user) {
			var insertValues = {
				name_of_crew_member: user,
				ano: flight.data_partida_utc
				.toString()
				.replace(/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/, "$1")
				.trim(),
				nps: ""
			};
			self.GeneralScore.createOrUpdate(insertValues, [
				"name_of_crew_member",
				"ano"
			]); // Insere/Atualiza
		});
	};

	/*
						|--------------------------------------------------------------------------
						|	Calcula nota NPS para atribução no registro de Notas Gerais
						|--------------------------------------------------------------------------
						*/
	this.updateGeneralNPS = function(user, year) {
		var self = this;
		var query;
		// var options; // Unused

		/*
							|--------------------------------------------------------------------------
							|	Obtenção dos grupos
							|--------------------------------------------------------------------------
							*/
		query =
			"user=".concat(user) +
			"^group.data_e_hora_de_partidaDATEPART".concat(
			year,
			"@javascript:gs.datePart('year','",
			year,
			"','EE')"
		);
		self.CrewGroupMember.get(query);

		var NPSs = self.CrewGroupMember.data
		.map(function(gMember) {
			query = {
				flight_number: gMember.group.numero_do_voo.toString(),
				origin: gMember.group.origem.toString(),
				destination: gMember.group.destino.toString(),
				flight_local_date: gMember.group.data_e_hora_de_partida.toString(),
				role: gMember.group.type.toString()
			};

			self.NPS.get(query);

			if (self.NPS.count > 0) return self.NPS.data[0];
			else return null;
		})
		.filter(function(nps) {
			return nps !== null;
		});

		notaNPS = NPSs.reduce(function(acm, nps) {
			return acm + parseInt(nps.grade);
		}, 0);

		notaNPS /= NPSs.length;

		return notaNPS;
	};

	/*
					  |--------------------------------------------------------------------------
					  |	Atualiza desempenho técnico do tripulante
					  |--------------------------------------------------------------------------
					  */
	this.updateTechnicalPerformance = function(user, year, score) {
		var insertValues = {
			name_of_crew_member: user,
			ano: year,
			technical_performance: score >= 95 ? 10 : 0
		};

		this.GeneralScore.createOrUpdate(insertValues, [
			"name_of_crew_member",
			"ano"
		]);
	};

	/*
					  |--------------------------------------------------------------------------
					  |	Calcula nota do registro de pesquisa vertical atual (BR)
					  |--------------------------------------------------------------------------
					  */
	this.calculateCurrentVertical = function(surveyInstance) {
		var score = 0;
		var calc = {};

		var ga = new GlideRecord("x_alabs_pex_instance_survey_question");
		ga.addQuery("survey_instance", surveyInstance);
		ga.addEncodedQuery('situation!=');
		ga.orderBy("category");
		ga.orderBy("situation");
		ga.query();

		while (ga.next()) {
			var situation = ga.situation;
			var property = gs.getProperty(ga.question.category.property_name);
			var category = ga.question.category.property_name;

			if(!calc[category])
				calc[category] = {
					weight: property
				};
			if(!calc[category][situation])
				calc[category][situation] = {
					quantity: 1,
					value: parseFloat(ga.question.peso_da_questao)
				};
			else{
				calc[category][situation]['quantity']++;
				calc[category][situation]['value'] += parseFloat(ga.question.peso_da_questao);
			}
		}
		gs.info("[PEX Score] CALC: {0}", JSON.stringify(calc));
		//Formula: MaxReal * (1 + distribuir)
		for(var cat in calc){
			var according = calc[cat]["according"] || {value: 0};
			var non_conform = calc[cat]["not_conform"] || {value: 0};		
			var not_applicable = calc[cat]["not_applicable"] || {value: 0};

			var maxreal = according['value'] + non_conform['value'];
			// 			gs.info("[PEX Score] maxreal: {0}", maxreal);
			var distribuir = not_applicable['value'] / (maxreal || 1);
			// 			gs.info("[PEX Score] distribuir: {0}", distribuir);
			var distribuido = maxreal * (1 + distribuir);
			var atingido = distribuido - (non_conform['value']);
			// 			gs.info("[PEX Score] atingido: {0}", atingido);
			var percent = atingido / (distribuido || 1);
			// 			gs.info("[PEX Score] Percent: {0}", percent);

			score+= calc[cat].weight * percent;
			// 			gs.info("[PEX Score] Final Score Calculated: {0}", score);
		}

		score = parseFloat(score).toFixed(1);
		// 		gs.info("[PEX Score] Final Score return: {0}", score);
		return score;
	};

	/*
						|--------------------------------------------------------------------------
						|	Atualiza autoavaliação (Caso não exista, insere registro)
						|--------------------------------------------------------------------------
						*/
	this.updateSelfEvaluation = function(user, year) {
		var insertValues = {
			name_of_crew_member: user,
			ano: year
			.toString()
			.replace(/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/, "$1")
			.trim(),
			self_assessment: ""
		};

		this.GeneralScore.createOrUpdate(insertValues, [
			"name_of_crew_member",
			"ano"
		]);
	};

	/*
						|--------------------------------------------------------------------------
						|	Calcula Auto avaliação para atualização das notas gerais
						|--------------------------------------------------------------------------
						*/
	this.updateGeneralSelfEvaluation = function(user, year) {
		var res = 0.0;

		var ga = new GlideAggregate("x_alabs_pex_instance_survey");

		ga.addQuery("responsible", user); // que pretença ao usuário X

		ga.addQuery("state", "IN", "finished,completed"); // Somente Finalizadas

		ga.addNotNullQuery("pontuacao_obtida_na_pesquisa"); // Pontuação obtida não está vazia

		ga.addQuery(
			"sys_created_on",
			"DATEPART",
			"".concat(year, "@javascript:gs.datePart('year','", year, "','EE')")
		); // Pesquisas realizadas em 2019

		ga.addQuery("survey.tipo_de_pesquisa", "matriz_tripulante"); // Tipo de pesquisa

		ga.addAggregate("MIN", "pontuacao_obtida_na_pesquisa");

		ga.groupBy("responsible"); // Agrupa por tripulante

		ga.query();

		if (ga.next()) {
			res = parseFloat(
				ga.getAggregate("MIN", "pontuacao_obtida_na_pesquisa")
			).toFixed(1); // Pega média fixando 1 casa decimal
		}

		gs.info("General Score - Self Evaluation: ".concat(res));

		return res;
	};

	/*
						|--------------------------------------------------------------------------
						|	Atualiza nota de pesquisa vertical (Caso não exista, insere registro)
						|--------------------------------------------------------------------------
						*/
	this.updateVertical = function(user, year) {
		var insertValues = {
			name_of_crew_member: user,
			ano: year
			.toString()
			.replace(/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/, "$1")
			.trim(),
			vertical_evaluation: ""
		};

		this.GeneralScore.createOrUpdate(insertValues, [
			"name_of_crew_member",
			"ano"
		]);
	};

	/*
						|--------------------------------------------------------------------------
						|	Calcula persquisas vertical para atualização das notas gerais
						|--------------------------------------------------------------------------
						*/
	this.updateGeneralVertical = function(user, year) {
		var res = 0.0;
		var total = 0;
		var count = 0;
		var min = gs.getProperty('x_alabs_pex.minimo_de_respondentes_por_tripulante');

		var ga = new GlideRecord("x_alabs_pex_instance_survey");
		ga.addQuery("tripulante_avaliado_na_pesquisa", user); // que pretença ao usuário X

		ga.addQuery("state", "completed"); // Pontuação obtida não está vazia

		ga.addQuery(
			"sys_created_on",
			"DATEPART",
			"".concat(year, "@javascript:gs.datePart('year','", year, "','EE')")
		); // Pesquisas realizadas em 2019

		ga.addQuery("survey.tipo_de_pesquisa", "vertical"); // Tipo de pesquisa

		ga.query();
		count = parseFloat(ga.getRowCount());
		while(ga.next()) {
			total += parseFloat(ga.pontuacao_obtida_na_pesquisa);

		}
		if(count >= min)
			res = total / count / 10;

		res = res.toFixed(1);

		return res;
	};

	this.type = "PexScoreUtils";
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>alpar.douglas.santos</sys_created_by>
        <sys_created_on>2018-08-07 14:45:31</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>355df5d5dbfb17000b2a32ffaa961925</sys_id>
        <sys_mod_count>207</sys_mod_count>
        <sys_name>PexScoreUtils</sys_name>
        <sys_package display_value="PEX" source="x_alabs_pex">4a94483c6f0a8f841fb18a6d6b3ee494</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PEX">4a94483c6f0a8f841fb18a6d6b3ee494</sys_scope>
        <sys_update_name>sys_script_include_355df5d5dbfb17000b2a32ffaa961925</sys_update_name>
        <sys_updated_by>alpar.egomes</sys_updated_by>
        <sys_updated_on>2019-06-19 18:37:01</sys_updated_on>
    </sys_script_include>
</record_update>
