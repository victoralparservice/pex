<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_transform_map">
    <sys_transform_map action="INSERT_OR_UPDATE">
        <active>true</active>
        <copy_empty_fields>false</copy_empty_fields>
        <enforce_mandatory_fields>No</enforce_mandatory_fields>
        <name>PEX - Vertical</name>
        <order>200</order>
        <run_business_rules>true</run_business_rules>
        <run_script>true</run_script>
        <script><![CDATA[/*
|--------------------------------------------------------------------------
|	Transform Map
|--------------------------------------------------------------------------
|
|	Autores:[
|		Yuhri Bernardes - 07/02/2019
|	]
|
|	Ações: [
|		1- Resgata informações do usuário
|		2- Resgata infomações do voo
|		3- Verificar se registro já existe
|	]
|
| Ignore cases: [
|		1- Não existir registro na tabela de gestão de tripulantes
|		2- Não existir voo registrado
|		3- Já existir um registro identico (mesmo usuário e voo)
|	]
|
*/

(function transformRow(source, target, map, log, isUpdate) {
  /*
  |--------------------------------------------------------------------------
  |	Informações do campo u_infovoo
  |--------------------------------------------------------------------------
  |
  |	coluna 4: Nº do voo
  |	coluna 11: DateTime partida local (YYYYMMDDHHMM) -> DD/MM/YYYY HH:MM:00
  |	coluna 13: Origem
  |	coluna 14: Destino
  |
  |	OBS: Array inicia em 0, a contagem de colunas em 1
  |
  */
  var logs = new global.LogGenerator(
    "x_alabs_pex",
    "[JDBC Integration] - Verticals (Main)"
  );

  var gr;

  /**************************************************************************/
  /************** Variáveis padronizadas vindas da integração ***************/
  /**************************************************************************/

  var infoVoo = source.u_infovoo.toString().split(";"); // Informações do Voo
  var src = {
    active: false,
    user: {
      title: source.u_cargo.toString().toUpperCase(),
      re: parseInt(source.u_re.toString())
        .toString()
        .replace(/[.](\d)/, ""),
      active: false,
      sys_id: null
    },
    flightInfo: {
      sys_id: null,
      legID: source.u_idleg.toString(),
      number: infoVoo[3] ? infoVoo[3] : null,
      origem: infoVoo[12].toString().toUpperCase(),
      destino: infoVoo[13].toString().toUpperCase(),
      localDepDate: infoVoo[10] ?
        infoVoo[10].replace(
          /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/,
          "$1-$2-$3 $4:$5:00"
        ) : null,
      localArrivalDate: infoVoo[11] ?
        infoVoo[11].replace(
          /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/,
          "$1-$2-$3 $4:$5:00"
        ) : null,
      flightDate: infoVoo[5].replace(/(\d{4})(\d{2})(\d{2})/, "$3-$2-$1")
    }
  };
  logs.addInfo(JSON.stringify(src), "Source Table Info");
  logs.addSection();
  /**************************************************************************/
  /****************** Autenticações para ignorar inserção *******************/
  /**************************************************************************/

  /**************************************************************************/
  /*********************** Cargo dentro dos exigidos ************************/
  var crewType = ["FA", "FE", "CL", "CA", "FO"];
  if (crewType.indexOf(src.user.title) === -1) {
    logs.addInfo(src.user.title, "(IGNORED) INVALID TYPE");
    log.error("(Ignored) Invalid Type " + src.user.title);
    ignore = true;
  }
  /**************************************************************************/
  /******************** Verifica existência do usuário **********************/
  // gr = new GlideRecord("x_alabs_pex_location_survey_types");
  gr = new GlideRecord("x_alabs_pex_crew_management");
  gr.addEncodedQuery("re=" + src.user.re);
  // gr.addEncodedQuery("active=true^re=" + src.user.re);
  gr.query();

  if (gr.next()) {
    log.info("Crewman found on management table: " + src.user.re)
    src.user.active = gr.active.toString();
    src.user.sys_id = gr.sys_id.toString();
  } else {
    logs.addInfo(src.user.re, "(IGNORED) CREWMAN NOT EXISTS ON MANAGEMENT TABLE");
    log.error("(Ignored) Crewman not exists on management table: " + src.user.re);
    ignore = true;
  }

  /**************************************************************************/
  /**************** Verifica existência de registro do voo ******************/
  gr = new GlideRecord("x_alabs_pex_flights");
  gr.addEncodedQuery(
    "inventorylegid=".concat(src.flightInfo.legID) // Filtra Leg ID
  );
  gr.query();

  if (gr.next()) {
    log.info("Flight Found (Leg ID): " + src.flightInfo.legID);
    src.flightInfo.sys_id = gr.sys_id.toString();
  } else {
    logs.addInfo(src.flightInfo.legID, "(IGNORED) FLIGHT NOT FOUND");
    log.error("(Ignored) Inexistent flight (Leg ID): " + src.flightInfo.legID);
    ignore = true;
  }

  /**************************************************************************/
  /**************** Verifica existencia de registro idêntico ****************/
  gr = new GlideRecord("x_alabs_pex_flight_crew");
  gr.addEncodedQuery(
    "user=".concat(src.user.sys_id) + "^flight=".concat(src.flightInfo.sys_id)
  );
  gr.query();

  /**************************************************************************/
  /******************** Atribui informações ao registro *********************/
  if (!gr.next()) {
    log.info("Flight crewman inserted");
    target.active = src.user.active; // Tripulante ativo ou inativo

    target.user = src.user.sys_id; // ID do tripulante (Crew Management)
    target.user_title = src.user.title; // Cargo do tripulante
    target.crewman_re = src.user.re; // RE do tripulante

    target.flight = src.flightInfo.sys_id; // ID do voo
    target.numero_do_voo = src.flightInfo.number; // Número do voo
    target.data_e_hora_de_partida = src.flightInfo.localDepDate; // Data/Hora de partida local
    target.origem = src.flightInfo.origem; // Nome do local origem
    target.destino = src.flightInfo.destino; // Nome do local destino
  } else {
    logs.addInfo("(IGNORED) FLIGHT CREWMAN ALREADY EXISTS");
    log.error("(Ignored) Flight crewman redundance");
    ignore = true;
  }

  logs.execute();
})(source, target, map, log, action === "update");
]]></script>
        <source_table>x_alabs_pex_informacoes_colaborador_implt</source_table>
        <sys_class_name>sys_transform_map</sys_class_name>
        <sys_created_by>alpar.egomes</sys_created_by>
        <sys_created_on>2019-06-10 17:41:12</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>4886af4cdbc63bc00b2a32ffaa961978</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>PEX - Vertical</sys_name>
        <sys_package display_value="PEX" source="x_alabs_pex">4a94483c6f0a8f841fb18a6d6b3ee494</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PEX">4a94483c6f0a8f841fb18a6d6b3ee494</sys_scope>
        <sys_update_name>sys_transform_map_4886af4cdbc63bc00b2a32ffaa961978</sys_update_name>
        <sys_updated_by>alpar.yuhri</sys_updated_by>
        <sys_updated_on>2019-06-11 14:55:14</sys_updated_on>
        <target_table>x_alabs_pex_flight_crew</target_table>
    </sys_transform_map>
</record_update>
