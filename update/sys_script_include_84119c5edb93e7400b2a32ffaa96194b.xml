<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_alabs_pex.TableCRUD</api_name>
        <client_callable>false</client_callable>
        <description>Biblioteca para manipulação de tabelas</description>
        <name>TableCRUD</name>
        <script><![CDATA[var TableCRUD = function(tableName) {
	this.tableName = tableName;
	this.type = "TableCRUD";
	this.count = null;
	this.queryString = null;
	this.data = [];

	/*
	|--------------------------------------------------------------------------
	|	Método `get(Object query, Object options)`
	|--------------------------------------------------------------------------
	|
	|	query: Objeto de requisição ou queryString
	|	options: Objeto para configuração da requisição
	|
	|	retorno: Array de GlideRecords resultados da busca
	|
	*/
	this.get = function(query, options) {
		var self = this;
		var dataArray = [];
		/**************************************************************************/
		/**************************** Gestão da query *****************************/
		/**************************************************************************/

		/**************************************************************************/
		/********************* Gestao em caso de query object *********************/
		if (typeof query === "object") {
			var parms = Object.keys(query);

			self.queryString = parms.reduce(function(acm, parm, idx, arr) {
				var value = "";
				var operator = "";
				var logic = "^";
				var str = "";
				var logicDef = {
					AND: "^",
					OR: "^OR"
				};

				if (typeof query[parm] === "object") {
					if (idx > 0) {
						logic = query[parm].logic
							? logicDef[query[parm].logic.toUpperCase()]
							: "^";
					} else {
						logic = "";
					}
					/**************************************************************************/
					/******************** Atribuição de valor e operador *********************/
					value = query[parm].value;
					operator = query[parm].operator ? query[parm].operator : "=";
				} else if (typeof query[parm] === "string") {
					value = query[parm];
					operator = "=";
				}

				/**************************************************************************/
				/************************ Criação da QueryString **************************/
				str = str.concat(logic, parm, operator, value);

				return acm + str;
			}, "");
		} else if (typeof query === "string") {
			/**************************************************************************/
			/********************* Gestao em caso de query string *********************/
			self.queryString = query;
		}

		/**************************************************************************/
		/************************ Inicializa GlideRecord **************************/
		/**************************************************************************/

		var gr = new GlideRecord(self.tableName);
		gr.addEncodedQuery(self.queryString);

		/**************************************************************************/
		/*************************** Gestão de opções *****************************/
		/**************************************************************************/

		if (options) {
			if (options.orderBy) gr.orderBy(options.orderBy);
			if (options.orderByDesc) gr.orderByDesc(options.orderByDesc);
			if (options.setLimit) gr.setLimit(options.setLimit);
		}

		/**************************************************************************/
		/************************ Obtenção dos registros **************************/
		/**************************************************************************/
		gr.query();

		self.count = gr.getRowCount();

		while (gr.next()) {
			var grA = new GlideRecord(self.tableName);
			if (grA.get(gr.sys_id.toString())) dataArray.push(grA);
		}

		self.data = dataArray;

		return dataArray;
	};

	/*
	|--------------------------------------------------------------------------
	|	Método `getByID(string sys_id)`
	|--------------------------------------------------------------------------
	|
	|	sys_id: sys_id do objeto a ser obtido
	|
	|	retorno: GlideRecord com resultado da busca
	|
	*/
	this.getByID = function(sys_id) {
		var self = this;

		/**************************************************************************/
		/************************ Inicializa GlideRecord **************************/
		/**************************************************************************/
		var gr = new GlideRecord(self.tableName);
		if (gr.get(sys_id)) {
			self.data = gr;
			self.count = 1;
			return gr;
		} else {
			self.count = 0;
			return null;
		}
	};

	/*
	|--------------------------------------------------------------------------
	|	Método `getAll(options)`
	|--------------------------------------------------------------------------
	|
	|	options: Objeto para configuração da requisição
	|
	|	retorno: Array de GlideRecords resultados da busca
	|
	*/
	this.getAll = function(options) {
		var self = this;
		var dataArray = [];

		/**************************************************************************/
		/************************ Inicializa GlideRecord **************************/
		/**************************************************************************/
		var gr = new GlideRecord(self.tableName);

		/**************************************************************************/
		/*************************** Gestão de opções *****************************/
		/**************************************************************************/
		if (options) {
			if (options.orderBy) gr.orderBy(options.orderBy);
			if (options.orderByDesc) gr.orderByDesc(options.orderByDesc);
			if (options.setLimit) gr.setLimit(options.setLimit);
		}

		/**************************************************************************/
		/************************ Obtenção dos registros **************************/
		/**************************************************************************/
		gr.query();

		self.count = gr.getRowCount();

		while (gr.next()) {
			var grA = new GlideRecord(self.tableName);
			if (grA.get(gr.sys_id.toString())) dataArray.push(grA);
		}

		self.data = dataArray;

		return dataArray;
	};
	// sys_id=ID do registro^NQnumero_do_voo=valor do voo
	/*
	|--------------------------------------------------------------------------
	|	Método `create(Object tableFields [, Array unique ...])`
	|--------------------------------------------------------------------------
	|
	|	tableFields: Objeto com valores para inserção
	|
	|	retorno: Array de GlideRecords com registros inseridos
	|
	*/

	this.create = function(tableFields) {
		var self = this;
		var args = null;
		var queryUK = null;

		/**************************************************************************/
		/************************* Gestão de unique keys **************************/
		/**************************************************************************/
		if (arguments.length > 1) {
			var tmp = arguments;
			args = Object.keys(arguments);
			args.shift();
			args = args.map(function(arg) {
				return tmp[arg];
			});
			queryUK = args.reduce(function(acm, uk, idx) {
				var str = "";
				if (idx > 0) str += "^NQ";

				if (typeof uk === "string") str += uk.concat("=", tableFields[uk]);
				//
				else if (typeof uk === "object")
					str += uk.reduce(function(acm, field, idx) {
						var str = "";
						if (idx > 0) str += "^";
						str += field.concat("=", tableFields[field]);

						return acm + str;
					}, "");

				return acm + str;
			}, "");
		}
		return queryUK;
	};
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>yuhri.bernardes</sys_created_by>
        <sys_created_on>2019-01-31 09:29:43</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>84119c5edb93e7400b2a32ffaa96194b</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>TableCRUD</sys_name>
        <sys_package display_value="PEX" source="x_alabs_pex">4a94483c6f0a8f841fb18a6d6b3ee494</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PEX">4a94483c6f0a8f841fb18a6d6b3ee494</sys_scope>
        <sys_update_name>sys_script_include_84119c5edb93e7400b2a32ffaa96194b</sys_update_name>
        <sys_updated_by>yuhri.bernardes</sys_updated_by>
        <sys_updated_on>2019-01-31 12:06:35</sys_updated_on>
    </sys_script_include>
</record_update>
