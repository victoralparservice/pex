<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $element, $rootScope) {

	/*
     * @description: Global variables.
     */

	var c = this;
	var dropZone = document.getElementById("drop-zone");
	var dropHere = document.getElementById("drop-here");
	var inputFileUpload = document.getElementById("input-file-upload");

	/*
     * @description: Export all records to .xls file,
     * @criteria: Before you test it out on your instance, check if your 
     * application name starts with 'x_alabs'.
     */

	$scope.exportFile = function(fn, dl) {
		var elt = document.getElementById('dynamicTable');
		var wb = XLSX.utils.table_to_book(elt, {sheet:"Sheet JS"});
		return dl ?
			XLSX.write(wb, {bookType:'xlsx', bookSST:true, type: 'base64'}) :
		XLSX.writeFile(wb, fn || ($scope.data.table + ('.xlsx')));
	}

	/*
     * @description: Call server to insert/update records from file.
     * @criteria: 
     */

	$scope.importFile = function() {
		$scope.sheet = $scope.sheet.slice(1);
		
		$scope.server.get({
			action: 'importSheet',
			sheet: $scope.sheet,
			table: $scope.data.table			
		}).then(function(server){
			
		})
	}

	/*
     * @description: Load .xsl file,
     * @criteria: Before upload the .XLS file, check if contains two pages,
     * one named Update and the another one named Insert.
     */

	dropZone.ondrop = function(e) {
		$scope.sheet = [];
		$(this).removeClass('drop');
		e.stopPropagation();
		e.preventDefault();
		var files = {};
		if (e.dataTransfer) {
			files = e.dataTransfer.files;
		} else {
			files = e.target.files;
		}

		$scope.file = files[0];
		var reader = new FileReader();
		reader.onload = function(e) {
			var data = e.target.result;
			var workbook = XLSX.read(data, { type: 'binary', raw: true });
			$scope.sheet = XLSX.utils.sheet_to_json(workbook.Sheets[Object.keys(workbook.Sheets)[0]]);
			$scope.$apply();
		};
		reader.readAsBinaryString($scope.file);
	}

	inputFileUpload.addEventListener('change', dropZone.ondrop);
	dropZone.ondragover = function() {
		$(this).addClass('drop');
		return false;
	}
	dropZone.ondragleave = function() {
		$(this).removeClass('drop');
		return false;
	}

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.wrapper {
  margin: 20px;
}

.hide {
  display: none;
}

.pagination{
  margin: 0 auto!important;
  display: table!important;
}

.align-center{
  margin: 0 auto;
  display: block;
}

.button-group{
  float:right;
}

.text--center {
  display: block;
  text-align: center;
}

.drop-zone {
  border: 1px dashed #ccc;
  // border-radius: 10px;
  padding: 20px;
  margin: 20px 0;
  &amp;.is-dragover {
    // color: #fff;
    border-color: #999;
    background-color: #e2e2e2;
  }
}
.btn--link {
  color: #0079c1;
  background: none;
  border: 0;
  padding: 0;
  cursor: pointer;
}
.js .box__file {
  display: none;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>pex_import</id>
        <internal>false</internal>
        <link/>
        <name>PEX: Import</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	/*
     * @description: Get URL parameters and Global variables,
     * @parameters: Table, View, Fields.
     */

	data.table = $sp.getParameter('sysparm_target');

	data.view = $sp.getParameter('sysparm_view');

	data.fields = $sp.getListColumns(data.table, data.view);

	data.fields += ',sys_id';

	data.query = $sp.getParameter('sysparm_query') || '';

	data.records = []

	/*
     * @description: Get object of fields,
     * @parameters: Table, Query, Fields.
     */

	var gr = new GlideRecord(data.table);

	data.fieldsObject = $sp.getFieldsObject(gr, data.fields);

	gr.addEncodedQuery(data.query);

	gr.query();

	while (gr.next()) {
		data.records.push($sp.getFieldsObject(gr, data.fields))
	}

	/*
     * @description: Insert or Update Records,
     * @parameters: Table, Query, Sheet, Input.
     */

	if (input) {
		if(input.action == 'importSheet') {
		
			input.sheet.forEach(function(row){

				var grSheet = new GlideRecord(input.table);

				if(row.sys_id) {
					grSheet.get(row.sys_id);
				} else {
					grSheet.initialize();
				}

				for(var fieldName in row){

					var type = grSheet.getElement(fieldName).getED().getInternalType();

					switch(type) {
						case "choice":
							var cl = new global.PEXGlobalUtils().choiceList(input.table, fieldName);
							for (var i = 0; i < cl.size(); i++) {
								 var choice = cl.get(i);
								 if(choice.getLabel() == row[fieldName]) {
									 
									 grSheet[fieldName] = choice.getValue();
								 }
							}
							break;
						default: 
							grSheet[fieldName].setDisplayValue(row[fieldName]);
					}

				}

				if(row.sys_id) {
					grSheet.update();	
				} else {
					grSheet.insert();
				}

			});

			gs.addInfoMessage('Registros atualizados')

		}
	}


})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>alparservice.marcos</sys_created_by>
        <sys_created_on>2019-05-19 01:14:38</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>9df17274db297700cceb5e7cf3961941</sys_id>
        <sys_mod_count>319</sys_mod_count>
        <sys_name>PEX: Import</sys_name>
        <sys_package display_value="PEX" source="x_alabs_pex">4a94483c6f0a8f841fb18a6d6b3ee494</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PEX">4a94483c6f0a8f841fb18a6d6b3ee494</sys_scope>
        <sys_update_name>sp_widget_9df17274db297700cceb5e7cf3961941</sys_update_name>
        <sys_updated_by>alparservice.marcos</sys_updated_by>
        <sys_updated_on>2019-05-20 02:10:24</sys_updated_on>
        <template><![CDATA[<div>

  <div class="jumbotron">
    <h1 class="display-4">Importação de Dados</h1>
    <p class="lead">Atualize ou insira novos registros em suas tabelas da ServiceNow.</p>
    <hr class="my-4">
    <!--
@description: Load .xls files.
-->

    <div class="drop-zone" id="drop-zone">
      <label class="drop-here align-center" id="drop-here">
        <span class="text--center">
          <i class="fa fa-cloud-upload fa-2"></i>
          <span class="js--advanced-upload">Arraste e solte aqui para anexar, ou <label for="file">clique para pesquisar</label>
            <input type="file" ng-model="inputFile" id="file" class="js--basic-upload hide" ng-change="ondrop($event)" ng-show="false" id="input-file-upload">
          </span>
        </span>
        <div>
        </div>
        <span ng-if="file"> <strong>${Arquivo carregado}: <span class="text-primary">{{ file.name }}</span> </strong>
        </span>
      </label>
    </div>


    <!--
@description: Dynamic records table.
-->
    <form class="form-inline" style="float: right;padding:10px;">
      <div class="form-group">
        <label for="inputPassword6">Limitador de Linhas</label>
        <input type="number" step="10" ng-model="rowNum" class="form-control mx-sm-3" aria-describedby="passwordHelpInline">
        <small id="passwordHelpInline" class="text-muted">
          * Será a quantidade de linhas a ser exportada
        </small>
      </div>
    </form>
    <table class="table table-striped table-hover" id="dynamicTable">
      <thead>
        <tr style="display:none;">
          <th ng-show="fieldName != 'sys_id'" ng-repeat="(fieldName, column) in data.fieldsObject">
            {{fieldName}}
          </th>
        </tr>
        <tr>
          <th ng-show="fieldName != 'sys_id'" ng-repeat="(fieldName, column) in data.fieldsObject">
            {{column.label}}
          </th>
        </tr>
      </thead>
      <tbody>
        <tr dir-paginate="record in data.records | itemsPerPage: rowNum">
          <td ng-show="fieldName != 'sys_id'" ng-repeat="(fieldName, column) in data.fieldsObject">
            {{record[fieldName].display_value}}
          </td>
        </tr>
      </tbody>
    </table>
    <div class="pagination pagination-sm">
      <span><dir-pagination-controls></dir-pagination-controls></span>
    </div>
    <div class="button-group">

      <button class="btn btn-default" ng-click="exportFile()">
        <i class="fa fa-download"></i> Exportar Registros
      </button>
      <button ng-disabled="!file" class="btn btn-default" ng-click="importFile()">
        <i class="fa fa-upload"></i> Importar registros
      </button>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
